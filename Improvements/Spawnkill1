-- ‚úÖ One-time guard
if _G.KillSystemActive then
    warn("üö´ Kill system already active")
    return
end
_G.KillSystemActive = true

--// Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

--// Locals
local LPlayer = Players.LocalPlayer
local StampAsset = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("StampAsset")
local LPlate

--// Find local plate
do
    local Plates = Workspace:WaitForChild("Plates")
    for _, plate in ipairs(Plates:GetChildren()) do
        if plate:FindFirstChild("Owner") and plate.Owner.Value == LPlayer then
            LPlate = plate:WaitForChild("Plate")
            break
        end
    end
end

--// KillModule
local KillModule = {}

-- ‚úÖ Resolve target safely (Player or BasePart)
local function resolveTarget(target)
    if target:IsA("Player") then
        local char = target.Character or target.CharacterAdded:Wait()
        return char:WaitForChild("HumanoidRootPart", 5)
    elseif target:IsA("BasePart") then
        return target
    end
end

-- ‚úÖ Safe Invoke wrapper
local function invokeStamp(parts, cframe)
    if not parts or not StampAsset then return end
    local ok, res = pcall(function()
        return StampAsset:InvokeServer(41324885, cframe, "{}", parts, 0)
    end)
    if not ok then
        warn("[StampAsset Failed]:", res)
    end
    return res
end

-- üî´ Kill single target
function KillModule.Kill(target, cframeOverride)
    local part = resolveTarget(target)
    if part and LPlate then
        local dest = cframeOverride or (LPlate.CFrame - Vector3.new(0, 9e9, 0))
        return invokeStamp({ part }, dest)
    end
end

-- üî´ Kill many targets in one batch
function KillModule.KillMany(targets, cframeOverride)
    local parts = {}
    for _, t in ipairs(targets) do
        local p = resolveTarget(t)
        if p then table.insert(parts, p) end
    end
    if #parts > 0 and LPlate then
        local dest = cframeOverride or (LPlate.CFrame - Vector3.new(0, 9e9, 0))
        return invokeStamp(parts, dest)
    end
end

-- üîÅ Continuous attachment loop (drag all in)
function KillModule.AttachAll(interval)
    interval = interval or 0.1
    task.spawn(function()
        while task.wait(interval) do
            for _, player in ipairs(Players:GetPlayers()) do
                if player ~= LPlayer and not LPlayer:IsFriendsWith(player.UserId) then
                    local part = resolveTarget(player)
                    if part and LPlate then
                        invokeStamp({ part }, LPlate.CFrame)
                    end
                end
            end
        end
    end)
end

--// Auto-monitor respawns
local function monitorPlayer(player)
    if player ~= LPlayer and not LPlayer:IsFriendsWith(player.UserId) then
        player.CharacterAdded:Connect(function(character)
            local hrp = character:WaitForChild("HumanoidRootPart")
            KillModule.Kill(hrp)
        end)
    end
end

Players.PlayerAdded:Connect(monitorPlayer)
for _, p in ipairs(Players:GetPlayers()) do
    monitorPlayer(p)
end

--// Start enforcement automatically
KillModule.AttachAll(0.1)

print("‚úÖ Kill system started")
