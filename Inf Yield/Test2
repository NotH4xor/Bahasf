-- 🌟 Friendly Teleport System (Maintainer + Searchers, 1s Retry, Role-Strict) 🌟
task.spawn(function()
    --// 🛠️ Services
    local HttpService = game:GetService("HttpService")
    local TeleportService = game:GetService("TeleportService")
    local Players = game:GetService("Players")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Workspace = game:GetService("Workspace")

    local LPlayer = Players.LocalPlayer
    local StampAsset = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("StampAsset", 5)
    local LPlate

    --// 🔍 Find your plate
    do
        local Plates = Workspace:WaitForChild("Plates")
        for _, plate in ipairs(Plates:GetChildren()) do
            if plate:FindFirstChild("Owner") and plate.Owner.Value == LPlayer then
                LPlate = plate:WaitForChild("Plate")
                break
            end
        end
        if not LPlate then
            warn("❌ No plate found for local player. Teleport functionality disabled.")
            return
        end
    end

    --// 🔒 Trust check (only Roblox friends)
    local function isTrusted(player)
        if player == LPlayer then return true end
        return LPlayer:IsFriendsWith(player.UserId)
    end

    --// 👑 Strict Maintainer rule
    local function getMaintainerId()
        local lowestId = math.huge
        for _, plr in ipairs(Players:GetPlayers()) do
            if isTrusted(plr) and plr.UserId < lowestId then
                lowestId = plr.UserId
            end
        end
        return lowestId
    end

    local function isMaintainer()
        return LPlayer.UserId == getMaintainerId()
    end

    --// 🎉 Teleport Module
    local TeleportModule = {}

    local function resolveTarget(target)
        if target:IsA("Player") then
            local char = target.Character or target.CharacterAdded:Wait()
            if char then
                local hrp = char:WaitForChild("HumanoidRootPart", 5)
                if hrp then
                    return hrp
                else
                    warn("⚠️ HumanoidRootPart not found for player:", target.Name)
                end
            else
                warn("⚠️ Character not found for player:", target.Name)
            end
        elseif target:IsA("BasePart") then
            return target
        end
        return nil
    end

    local function invokeStamp(parts, cframe)
        if not parts or not StampAsset or not LPlate then
            warn("⚠️ Invalid parameters for invokeStamp: parts or StampAsset missing.")
            return
        end
        if #parts == 0 then
            warn("⚠️ No valid parts to teleport.")
            return
        end
        local ok, res = pcall(function()
            return StampAsset:InvokeServer(41324885, cframe, "{}", parts, 0)
        end)
        if not ok then
            warn("😔 Teleport failed:", res)
        end
        return res
    end

    function TeleportModule.Teleport(target, cframeOverride)
        local part = resolveTarget(target)
        if part and LPlate then
            local dest = cframeOverride or (LPlate.CFrame - Vector3.new(0, 9e9, 0))
            return invokeStamp({ part }, dest)
        else
            warn("⚠️ Teleport failed: Invalid target or plate.")
        end
    end

    function TeleportModule.TeleportMany(targets, cframeOverride)
        local parts = {}
        for _, t in ipairs(targets) do
            local p = resolveTarget(t)
            if p then table.insert(parts, p) end
        end
        if #parts > 0 and LPlate then
            local dest = cframeOverride or (LPlate.CFrame - Vector3.new(0, 9e9, 0))
            return invokeStamp(parts, dest)
        else
            warn("⚠️ TeleportMany failed: No valid parts or plate.")
        end
    end

    function TeleportModule.AttachAll(interval)
        interval = interval or 1
        local teleportAttempts = {}
        task.spawn(function()
            while task.wait(interval) do
                for _, player in ipairs(Players:GetPlayers()) do
                    if player ~= LPlayer and not isTrusted(player) then
                        teleportAttempts[player] = teleportAttempts[player] or 0
                        if teleportAttempts[player] < 5 then
                            local part = resolveTarget(player)
                            if part and LPlate then
                                invokeStamp({ part }, LPlate.CFrame)
                                teleportAttempts[player] = teleportAttempts[player] + 1
                            end
                        end
                    end
                end
            end
        end)
    end

    local function monitorPlayer(player)
        if player ~= LPlayer and not isTrusted(player) then
            player.CharacterAdded:Connect(function(character)
                local hrp = character:WaitForChild("HumanoidRootPart", 5)
                if hrp then
                    TeleportModule.Teleport(hrp)
                end
            end)
        end
    end

    Players.PlayerAdded:Connect(monitorPlayer)
    for _, p in ipairs(Players:GetPlayers()) do
        monitorPlayer(p)
    end

    TeleportModule.AttachAll(1)

    --// 🌍 Smart ServerHop
    local function ServerHop()
        if isMaintainer() then
            warn("🛑 Maintainer detected, anchoring this server.")
            return
        end

        local maxRetries = 10
        local retryCount = 0
        local url = string.format(
            "https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=Desc&limit=100",
            game.PlaceId
        )

        while retryCount < maxRetries do
            local success, result = pcall(game.HttpGet, game, url)
            if success then
                local decoded = HttpService:JSONDecode(result)
                local servers = decoded.data
                local serverCount = #servers

                for _, v in ipairs(servers) do
                    if v.maxPlayers > v.playing and v.id ~= game.JobId then
                        local skip = false
                        if v.playerIds and serverCount > 1 then
                            for _, pid in ipairs(v.playerIds) do
                                if LPlayer:IsFriendsWith(pid) or pid == getMaintainerId() then
                                    skip = true
                                    break
                                end
                            end
                        end

                        if not skip then
                            warn(("🌐 Hopping to server (%s/%s players)..."):format(v.playing, v.maxPlayers))
                            TeleportService:TeleportToPlaceInstance(game.PlaceId, v.id)
                            return
                        end
                    end
                end

                url = string.format(
                    "https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=Desc&limit=100&cursor=%s",
                    game.PlaceId, decoded.nextPageCursor or ""
                )
            else
                warn("❌ HTTP request failed:", result)
            end
            retryCount = retryCount + 1
            task.wait(1)
        end
        warn("⚠️ Max retries reached. No suitable server found.")
    end

    --// 🚀 Auto trigger
    task.spawn(function()
        while task.wait(2) do
            local strangersExist = false
            for _, player in ipairs(Players:GetPlayers()) do
                if not isTrusted(player) then
                    strangersExist = true
                    break
                end
            end

            if not strangersExist and not isMaintainer() then
                warn("🌐 Only trusted friends detected, I am a searcher, hopping...")
                ServerHop()
            end
        end
    end)

    --// 🔔 Notify
    if typeof(notify) == "function" then
        if isMaintainer() then
            notify("Friendly Teleport System", "Maintainer role: anchoring server.")
        else
            notify("Friendly Teleport System", "Searcher role: hopping forever until unique stranger server found.")
        end
    else
        warn("⚠️ Notify function not available, using print.")
        if isMaintainer() then
            print("🔔 Maintainer role: anchoring server.")
        else
            print("🔔 Searcher role: hopping forever until unique stranger server found.")
        end
    end
end)
