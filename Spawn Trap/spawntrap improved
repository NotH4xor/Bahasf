local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local LPlayer = Players.LocalPlayer

local Remotes = ReplicatedStorage.Remotes
local StampAsset = Remotes.StampAsset
local Plates = Workspace.Plates
local LPlate

-- cache LPlate once
for i = 1, #Plates:GetChildren() do
local Plate = Plates:GetChildren()[i]
if Plate.Owner.Value == LPlayer then
LPlate = Plate.Plate
break
end
end

local Module = {}

function Module.Kill(Player)
if Player:IsA("Player") then Player = Player.Character and Player.Character.PrimaryPart end
if Player then
StampAsset:InvokeServer(
41324885,
LPlate.CFrame - Vector3.new(0, 9e9, 0),
"{}",
{Player},
0
)
end
end

local function isFriend(player)
return LPlayer:IsFriendsWith(player.UserId)
end

-- function to monitor and kill players immediately upon respawn
local function monitorPlayer(player)
if player ~= LPlayer and not isFriend(player) then
player.CharacterAdded:Connect(function(character)
task.defer(function() -- defer to ensure primary part is ready
local primaryPart = character:WaitForChild("HumanoidRootPart", 2)
if primaryPart then
Module.Kill(primaryPart)
end
end)
end)
end
end

-- connect function to PlayerAdded event for aggressive monitoring
Players.PlayerAdded:Connect(monitorPlayer)
for _, player in ipairs(Players:GetPlayers()) do
monitorPlayer(player)
end

-- additional loop to catch any player missed during events
task.spawn(function()
while true do
for _, player in ipairs(Players:GetPlayers()) do
if player ~= LPlayer and not isFriend(player) then
local character = player.Character
if character and character.PrimaryPart then
Module.Kill(character.PrimaryPart)
end
end
end
task.wait(0.1)
end
end)
